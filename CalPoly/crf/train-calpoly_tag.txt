<description>Basic principles of algorithmic problem solving and programming using methods of top-down design, stepwise refinement and procedural abstraction.  Basic control structures, data types, and input/output.  Introduction to the software development process:  design, implementation, testing and documentation.  The syntax and semantics of a modern programming language.</description>  <grading>Credit not available for students who have taken CSC/CPE 108.</grading>  <format>3 lectures, 1 laboratory.</format>  <other>Crosslisted as CPE/CSC 101.</other>
<description>Facilitated study and discussion of fundamental concepts of computer science and familiarization with programming environments.</description> <grading>Credit/No Credit grading only.</grading> <format>1 laboratory.</format> <other>Crosslisted as CPE/CSC 105.</other>
<description>Accelerated introduction to basic principles of algorithmic and object-oriented problem solving and programming.  Introduction to programming language concepts including control structures, data types, classes, and inheritance.  Program design principles.  Use and implementation of algorithms (searching, sorting, recursion) and data structures (lists, stacks, and queues).</description> <requisite>Intended for students with experience in algorithmic problem solving and using basic control structures and data types in a modern programming language (CPE/CSC 101), but who are not ready for CPE/CSC 202.</requisite> <grading>Not open to students with credit in CPE/CSC 102 or CPE/CSC 202.</grading> <format>3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 108.</other>
<description>Use of a supportive software development environment to design, develop, and test applications in a selected topic domain that demonstrates the potential of careers in computing.  An introduction to computing and to the selected topic domain.  The Schedule of Classes will list topic selected.</description> <requisite>No programming experience required.</requisite> <grading>Not for students with credit in CPE/CSC 103 or CPE/CSC 203.</grading> <format> 3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 123.</other>
<description>Use of click-and-drag software application to create an entertaining or informative, socially responsible application, such as a game. Team collaboration to design, develop, and test applications. Focus on design, teamwork, and using an iterative development process. An enjoyable introduction to both computer science and interactive entertainment.</description> <requisite>No computer science experience required.</requisite> <format>3 lectures, 1 laboratory.</format>
<description>Individual investigation, research, studies, or surveys of selected problems.</description> <grading>Total credit limited to 4 units, with a maximum of 2 units per quarter.</grading>
<description>Introduction to data structures and analysis of algorithms.  Abstract datatypes.  Specification and implementation of advanced data structures.  Theoretical and empirical analysis of recursive and iterative algorithms.  Software performance evaluation and testing techniques.</description> <requisite>Not open to students with credit in CSC/CPE 108.</requisite> <format>3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 202.</other> <<previousname>>Formerly CPE/CSC 103.</<previousname>>
<description>Object-oriented programming and design with applications to project construction.  Introduction to class design, interfaces, inheritance, generics, exceptions, streams, and testing.</description> <format>3 lectures, 1 laboratory.</format>  <other>Crosslisted as CPE/CSC 203.</other>  <previousname>Formerly CPE/CSC 102.</previousname>
<description>Reinforcement of computer science fundamentals.  Review of important algorithms, language features, design, syntax, and testing techniques.  Repeated application of techniques to solve problems in a constrained amount of time.  Primarily intended to support students preparing for the Association for Computing Machinery's International Collegiate Programming Contest.</description> <grading>Credit/No Credit grading only.  Total credit limited to 15 units.</grading> <format>1 laboratory.</format>
<description>Introduction to computer systems.  Simple instruction set architecture and the computer hardware needed to implement that architecture.  Machine and assembly language programming.</description> <format>3 lectures, 1 laboratory.</format>
<description>Programming techniques and procedures with applications to engineering problems.  Introduction to numerical methods and simulation.</description> <grading>Credit not allowed for CSC, Software Engineering or CPE majors.</grading> <format>2 activities.</format>
<description>Computer programming, with an emphasis on procedural programming, taught using a language hosted by applications commonly used in science and engineering.</description> <grading>Credit not allowed for CSC, CPE or Software Engineering majors.</grading> <format>2 lectures, 1 activity.</format>
<description>The C programming language and the UNIX programming environment.  Operators, standard I/O functions, strings, pointers and arrays, data types and storage classes. Unix shell programming and basic I/O system calls.</description> <grading>Credit not allowed for CSC, Software Engineering or CPE majors.</grading> <format>3 lectures.</format>
<description>Introduction to the fundamentals of computer programming with an emphasis on mathematical, scientific and engineering applications:  principles of algorithmic problem solving and procedural programming using a modern programming language, data types, elementary data structures, input/output and control structures.  Not a substitute for CSC/CPE 101 for CSC/CPE majors or minors.</description> <format>3 lectures, 1 laboratory.</format>
<description>Further study of computer program development with an emphasis on mathematical, scientific and engineering applications.  Introduction to more complicated data types and structures.  Practice of more complicated techniques of procedural programming.  Introduction to the principles of object-oriented programming using a modern programming language.  Detailed discussion of lists and classic list algorithms, algorithm analysis, multidimensional arrays, records, dynamic data structures, file input/output, classes.  Not a substitute for CSC/CPE 202 for CSC/CPE/SE majors or minors.</description>  <format>3 lectures, 1 laboratory.</format>
<description>Directed group study of selected topics.  The Schedule of Classes will list title selected.</description> <grading>Total credit limited to 8 units.</grading> <format>1 to 4 lectures.</format>
<description>The responsibilities of the computer science professional.  The ethics of science and the IEEE/ACM Software Engineering Code of Ethics.  Quality tradeoffs, software system safety, intellectual property, history of computing and the social implications of computers in the modern world.  Applications to ethical dilemmas in computing.  Technical presentation methods and practice.</description> <format>3 lectures, 1 laboratory.</format>
<description>Principles and practices for defining and applying software processes to individual software development tasks.  Quantitative methods for the measurement and analysis of software development cost and quality.  Interpretation and evaluation of process metrics for creation of improvement plans.  Adaptation of processes to individual styles.</description> <format>3 lectures, 1 laboratory.</format>
<description>Social, ethical, political and technological implications and effects of computers in the modern world.  Examination of the benefits and side-effects of computer applications and automation.  Case study review and analysis.</description>  <format>4 lectures.</format> <prerequisite>Fulfills GE Area F.</prerequisite>
<description>Practical coverage of educational techniques appropriate for tutoring in CSC/CPE undergraduate courses, including Socratic methods for tutoring of technical topics, design of test questions and grading rubrics, and lecture presentation.  Intended for CSC/CPE/SE students interested in tutoring, grading, or a career in teaching computer science.  </description> <format>1 lecture, 1 laboratory.</format> <other>Not available for technical elective credit.</other>
<description>Practical software development skills needed for construction of mid-sized production-quality software modules, using the CSC upper division programming language.  Topics include inheritance, exceptions, and memory and disk-based dynamic data structures.  Students must complete an individual programming project of mid-level complexity.</description> <format>3 lectures, 1 laboratory.</format>
<description>Requirements, specification, design, implementation, testing and verification of large software systems.  Study and use of the software process and software engineering methodologies; working in project teams.</description> <other>Not open to students with credit in CSC 308.</other>  <format>3 lectures, 1 laboratory.</format>
<description>Principles for engineering requirements analysis and design of large complex software systems.  Software process models.  Methods of project planning, tracking, documentation, communication, and quality assurance.  Analysis of engineering tradeoffs.  Group laboratory project.  Technical oral and written presentations.</description> <format>3 lectures, 1 laboratory.</format>
<description>Continuation of the software lifecycle.  Methods and tools for the implementation, integration, testing and maintenance of large software systems.  Software development and test environments.  Software quality assurance.  Group laboratory project.  Technical presentation methods and practice.</description> <format>3 lectures, 1 laboratory.</format>
<description>How computers and computer devices work.  Introduction to software systems and applications.  How computers connect with various media including images, speech and data.  How information is encoded and transmitted across networks.  Relationship between the computer and human information processing.</description> <format>4 lectures.</format> <other>Crosslisted as CSC 310/HNRS 311.</other> <prerequisite>Fulfills GE Area F.</prerequisite>
<description>Interdisciplinary creation of static and animated computational art using algorithms.  General design principles in a digital setting, including color, shape, composition, perspective, principles of animation.  Development of computational tools such as variables, iteration, logic, functions.  Creative expression via coding and creative coding.</description> <format>3 lectures, 1 laboratory.</format> <prerequisite>Fulfills GE Area F.</prerequisite>
<description>Exploration of practical computer security in everyday life for non-majors.  Covering the principles, technologies and tools used to secure the Internet and keep ourselves 'digitally' secure, including:  privacy and anonymity, web and data security, cryptography, malware, authentication and access control.</description> <format>3 lectures, 1 laboratory.</format> <prerequisite>Fulfills GE Area F.</prerequisite>
<description>Survey of topics in computer system and network security, including protection, access control, distributed access control, operating system security, applied cryptography, network security, firewalls, secure coding practices, and case studies from real-world systems.</description> <format>3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 321.</other>
<description>An introduction to the theory and practice of building secure, cryptographic systems.  Core cryptographic primitives.  Implementation, evaluation and subversion of widely deployed cryptographic products and protocols.</description> <format>3 lectures, 1 laboratory.</format>
<description>Introduction to policies and technologies related to digital privacy.  Legal decisions and policies, domestic and global cultural expectations, and privacy related technologies including applications to surveillance, big data, websites, mobile, and privacy by design.</description> <format>3 lectures, 1 laboratory.</format>
<description>Music-producing programs.  Software synthesizers:  oscillators, coupled oscillators, wavetable synthesis.  Sound processing units/filters:  LTI, FIR, IIR, nonlinear.  Physics of sound, mathematical foundations of sound synthesis and filtering, existing sound formats (both sampled and MIDI).</description> <format>3 lectures, 1 laboratory.</format>
<description>Structures of computer science:  logic, sets, relations, functions, graphs and trees.  Propositional and predicate logic.  Applications of predicate logic to preconditions, postconditions, and proof techniques.  Complexity of algorithms.</description> <other>Not open to students with credit in CSC 141.</other> <format>4 lectures.</format>
<description>Intermediate and advanced algorithms and their analysis.  Mathematical, geometrical, and graph algorithms.  NP-complete problems.  Additional topics will be chosen from pattern matching, file compression, cryptology, dynamic and linear programming, and exhaustive search.  Course may be offered in classroom-based or online format.</description> <format>3 lectures, 1 laboratory.</format>
<description>Definition and specification of a team-based creative collaboration on a digital interactive art project (e.g.  animation, video game, interactive media display, etc).  Research and techniques, project planning and project team organization, prototype creation.</description> <format>1 lecture, 1 laboratory.</format> <other>Crosslisted as ART/CSC 350.</other>
<description>C programming language from a system programming perspective.  Standard C language including operators, I/O functions, and data types in the context of system functions.  Unix commands, shell scripting, file system, editors.</description> <format>3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 357.</other>
<description>Basic principles of database management systems (DBMS) and of DBMS application development.  DBMS objectives, systems architecture, database models with emphasis on Entity-Relationship and Relational models, data definition and manipulation languages, the Structured Query Language (SQL), database design, application development tools.</description> <format>3 lectures, 1 laboratory.</format>
<description>The database modeling problem.  Database modeling levels:  external, conceptual, logical and physical.  Database models:  entity-relationship, relational, object-oriented, semantic, and object-relational.  Normal forms.  Distributed database design.  Functional analysis of database applications and transaction specification, design, and implementation.</description>  <format>3 lectures, 1 laboratory.</format>
<description>Introduction to distributed computing paradigms and cloud computing.  Modern distributed computing infrastructures.  Problem-solving in a distributed computing environment.</description> <format>3 lectures, 1 laboratory.</format>
<description>In-depth study of game design including rules, player interaction, and storytelling.  Exploration of effective use of sound, art, and game controls in creating meaningful play.  Development of fully functioning and engaging games, following standard domain-specific software development processes and using physical prototyping and playtesting.  Current, industry-tested game engines.</description> <format>3 lectures, 1 laboratory.</format>
<description>Project-based, software oriented, design of interactive entertainment applications.  Topics may include interactive storytelling, game physics, game AI, scripting, and development of virtual worlds using modeling and rendering tools.  Projects require significant programming.</description> <format>3 lectures, 1 laboratory.</format>
<description>Individual investigation, research, studies or surveys of selected problems.</description> <grading>Total credit limited to 4 units.</grading>
<description>Software requirements elicitation, analysis and documentation.  Team process infrastructure and resource estimation to support appropriate levels of quality.  Software architectural design.</description> <format>3 lectures, 1 laboratory.</format>
<description>Design and construction of sizeable software products.  Technical management of software development teams.  Software development process models, software design, documentation, quality assurance during development, software unit and integration testing; CASE tools, development environments, test tools, configuration management.</description> <format>3 lectures, 1 laboratory.</format>
<description>Deployment of a sizeable software product by a student team.  Software maintenance and deployment economic issues.  Management of deployed software:  version control, defect tracking and technical support.</description> <format>3 lectures, 1 laboratory.</format>
<description>Selected topics in software engineering.  Topics may include program generation, quality assurance, formal methods, software metrics, design methods, testing, or software development processes.  The Schedule of Classes will list topic selected.</description> <grading>Total credit limited to 8 units.</grading> <format>3 lectures, 1 laboratory.</format>
<description>Theory and practice of evaluation of software and software systems.  Design of experiments for measuring software performance, measuring software output quality, comparing multiple implementations of the same algorithm, and evaluation of software heuristics.  Selection of appropriate software evaluation measures and criteria.</description> <format>3 lectures, 1 laboratory.</format>
<description>Introduction to network and web security, including denial of service, botnets, access control, routing attacks, transport layer attacks, tunneling mechanisms, VPNs, IDS, firewalls, penetration testing, key distribution, browser security, social network security, email security, jamming, and wireless security.</description> <format>3 lectures, 1 laboratory.</format> <other>Crosslisted as CPE/CSC 422.</other>
<description>Principles behind secure software design including threat models, trust management, common vulnerabilities and mitigation techniques, robust software development, isolation of untrusted code, auditability, and testing.</description> <format>3 lectures, 1 laboratory.</format>
<description>Selected topics in emerging areas of computer security.  Potential topics include:  network and web security, critical infrastructure protection, embedded systems security, malware analysis, mobile security, and digital forensics, among others.  The Schedule of Classes will list topic selected.</description> <grading>Total credit limited to 8 units.</grading> <format>3 lectures, 1 laboratory.</format>
<description>Construction of the front end of a compiler including lexical analysis, syntactic analysis, type checking, and formal semantics.  Introduction to regular languages, finite automata, and context-free grammars.</description> <format>3 lectures, 1 laboratory.</format>

